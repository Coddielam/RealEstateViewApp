{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(true);\n  const [fail, setFail] = useState(false); // price range\n  // size\n\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */\n\n  const readFile = file => {\n    const promise = new Promise((res, rej) => {\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */\n\n        const workbook = XLSX.read(arrayBuffer, {\n          type: 'buffer'\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      };\n\n      fileReader.onerror = err => rej(err);\n    });\n    promise.then(d => {\n      setData(d);\n    });\n  };\n\n  useEffect(() => {\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log('response:', response);\n      return response.json();\n    }).then(data => {\n      console.log('data:', data);\n      setData(data);\n      return setLoaded(false);\n    }).catch(err => {\n      setLoaded(true);\n      setFail(true);\n      return console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"XlFileLoader\",\n      id: \"XlFileLoader\",\n      accept: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      onChange: e => {\n        const file = e.target.files[0];\n        readFile(file);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), !fail ? !loaded ? /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Still loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 48\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Failed to fetch data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"k+QKetQLmTlDky5B0MyOmgWRURE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx"],"names":["React","useState","useEffect","XLSX","DataTable","App","data","setData","loaded","setLoaded","fail","setFail","readFile","file","promise","Promise","res","rej","fileReader","FileReader","readAsArrayBuffer","onload","e","arrayBuffer","target","result","workbook","read","type","worksheetName","SheetNames","workSheet","Sheets","utils","sheet_to_json","onerror","err","then","d","fetch","headers","response","console","log","json","catch","files"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(true);\n  const [fail, setFail] = useState(false);\n  // price range\n\n  // size\n  \n\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */ \n  const readFile = (file) => {\n    const promise = new Promise((res, rej)=>{\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */ \n        const workbook = XLSX.read(arrayBuffer, {type:'buffer'});\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      }\n \n      fileReader.onerror = (err) => rej(err);\n    })\n\n\n    promise.then((d)=>{\n      setData(d);\n    })\n  }\n\n  useEffect(()=>{\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(response=>{\n      console.log('response:',response);\n      return response.json();\n    })\n    .then(data=>{\n      console.log('data:',data);\n      setData(data);\n      return setLoaded(false);\n    })\n    .catch(err=>{\n      setLoaded(true);\n      setFail(true);\n      return console.log(err);\n    })\n\n  },[])\n\n  return (\n    <div className=\"App\">\n\n      <input type=\"file\" \n      name=\"XlFileLoader\"\n      id=\"XlFileLoader\"\n      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \n      onChange={(e)=>{\n        const file = e.target.files[0];\n        readFile(file);\n      }}/>\n\n      { \n      !fail ? \n        ( !loaded ? <DataTable data={data}/> : <h1>Still loading data...</h1>) : \n        (<h1>Failed to fetch data...</h1>) \n      }\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}