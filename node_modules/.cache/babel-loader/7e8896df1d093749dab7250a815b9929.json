{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */\n\n  const readFile = file => {\n    const promise = new Promise((res, rej) => {\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */\n\n        const workbook = XLSX.read(arrayBuffer, {\n          type: 'buffer'\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      };\n\n      fileReader.onerror = err => rej(err);\n    });\n    promise.then(d => {\n      setData(d);\n    });\n  };\n\n  useEffect(() => {\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      return setData(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"XlFileLoader\",\n      id: \"XlFileLoader\",\n      accept: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      onChange: e => {\n        const file = e.target.files[0];\n        readFile(file);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx"],"names":["React","useState","useEffect","XLSX","DataTable","App","data","setData","readFile","file","promise","Promise","res","rej","fileReader","FileReader","readAsArrayBuffer","onload","e","arrayBuffer","target","result","workbook","read","type","worksheetName","SheetNames","workSheet","Sheets","utils","sheet_to_json","onerror","err","then","d","fetch","headers","response","json","catch","console","log","files"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEA;AACF;AACA;AACA;;AACE,QAAMO,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAY;AACtC;AACA,YAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AAEAK,MAAAA,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;AACzB,cAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;AACA;;AACA,cAAMC,QAAQ,GAAGnB,IAAI,CAACoB,IAAL,CAAUJ,WAAV,EAAuB;AAACK,UAAAA,IAAI,EAAC;AAAN,SAAvB,CAAjB;AACA,cAAMC,aAAa,GAAGH,QAAQ,CAACI,UAAT,CAAoB,CAApB,CAAtB;AACA,cAAMC,SAAS,GAAGL,QAAQ,CAACM,MAAT,CAAgBH,aAAhB,CAAlB;AACA,cAAMnB,IAAI,GAAGH,IAAI,CAAC0B,KAAL,CAAWC,aAAX,CAAyBH,SAAzB,CAAb;AACAf,QAAAA,GAAG,CAACN,IAAD,CAAH;AACD,OARD;;AAUAQ,MAAAA,UAAU,CAACiB,OAAX,GAAsBC,GAAD,IAASnB,GAAG,CAACmB,GAAD,CAAjC;AACD,KAhBe,CAAhB;AAmBAtB,IAAAA,OAAO,CAACuB,IAAR,CAAcC,CAAD,IAAK;AAChB3B,MAAAA,OAAO,CAAC2B,CAAD,CAAP;AACD,KAFD;AAGD,GAvBD;;AAyBAhC,EAAAA,SAAS,CAAC,MAAI;AACZ;AACAiC,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjBC,MAAAA,OAAO,EAAC;AACN,wBAAgB;AADV;AADS,KAAd,CAAL,CAKCH,IALD,CAKMI,QAAQ,IAAE;AACd,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAPD,EAQCL,IARD,CAQM3B,IAAI,IAAE;AACV,aAAOC,OAAO,CAACD,IAAD,CAAd;AACD,KAVD,EAWCiC,KAXD,CAWOP,GAAG,IAAE;AACVQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACD,KAbD;AAeD,GAjBQ,EAiBP,EAjBO,CAAT;AAmBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACA,MAAA,IAAI,EAAC,cADL;AAEA,MAAA,EAAE,EAAC,cAFH;AAGA,MAAA,MAAM,EAAC,mEAHP;AAIA,MAAA,QAAQ,EAAGd,CAAD,IAAK;AACb,cAAMT,IAAI,GAAGS,CAAC,CAACE,MAAF,CAASsB,KAAT,CAAe,CAAf,CAAb;AACAlC,QAAAA,QAAQ,CAACC,IAAD,CAAR;AACD;AAPD;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEH;AAAjB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GArEQD,G;;KAAAA,G;AAuET,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */ \n  const readFile = (file) => {\n    const promise = new Promise((res, rej)=>{\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */ \n        const workbook = XLSX.read(arrayBuffer, {type:'buffer'});\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      }\n \n      fileReader.onerror = (err) => rej(err);\n    })\n\n\n    promise.then((d)=>{\n      setData(d);\n    })\n  }\n\n  useEffect(()=>{\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(response=>{\n      return response.json();\n    })\n    .then(data=>{\n      return setData(data);\n    })\n    .catch(err=>{\n      console.log(err);\n    })\n\n  },[])\n\n  return (\n    <div className=\"App\">\n\n      <input type=\"file\" \n      name=\"XlFileLoader\"\n      id=\"XlFileLoader\"\n      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \n      onChange={(e)=>{\n        const file = e.target.files[0];\n        readFile(file);\n      }}/>\n\n      <DataTable data={data}/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}