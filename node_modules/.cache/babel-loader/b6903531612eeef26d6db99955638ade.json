{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\nimport Filters from './components/Filters';\n\nfunction App() {\n  _s();\n\n  const [originalData, setOriginalData] = useState([]);\n  const [greaterThan, setGreaterThan] = useState(0);\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(true);\n  const [fail, setFail] = useState(false);\n  const [minPrice, setMinPrice] = useState(0);\n  const [maxPrice, setMaxPrice] = useState('');\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */\n\n  const readFile = file => {\n    const promise = new Promise((res, rej) => {\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */\n\n        const workbook = XLSX.read(arrayBuffer, {\n          type: 'buffer'\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      };\n\n      fileReader.onerror = err => rej(err);\n    });\n    promise.then(d => {\n      setData(d[0]);\n      setLoaded(true);\n    });\n  };\n  /* fetching data and update data state on mount */\n\n\n  useEffect(() => {\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      setOriginalData(data[0]);\n      setData(data[0]);\n      return setLoaded(false);\n    }).catch(err => {\n      setLoaded(true);\n      setFail(true);\n      return console.log(err);\n    });\n  }, []);\n  /* table data changes every time minPrice changes */\n\n  useEffect(() => {\n    setData(originalData);\n    setGreaterThan(data.filter(obj => {\n      return Number(obj['Price']) > Number(minPrice);\n    })());\n    return setData(greaterThan);\n  }, [minPrice]);\n\n  const handleSetMinPrice = e => {\n    setMinPrice(e.target.value);\n  };\n\n  const handleSetMaxPrice = e => {\n    return setMaxPrice(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"XlFileLoader\",\n      id: \"XlFileLoader\",\n      accept: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      onChange: e => {\n        setLoaded(false);\n        const file = e.target.files[0];\n        readFile(file);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      minPrice: minPrice,\n      maxPrice: maxPrice,\n      setMinPriceHandler: handleSetMinPrice,\n      setMaxPriceHandler: handleSetMaxPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), !fail ? !loaded ? /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Still loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 48\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Failed to fetch data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"mErS2TYrXOvC9rHm6xdFvM9HV+4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx"],"names":["React","useState","useEffect","XLSX","DataTable","Filters","App","originalData","setOriginalData","greaterThan","setGreaterThan","data","setData","loaded","setLoaded","fail","setFail","minPrice","setMinPrice","maxPrice","setMaxPrice","readFile","file","promise","Promise","res","rej","fileReader","FileReader","readAsArrayBuffer","onload","e","arrayBuffer","target","result","workbook","read","type","worksheetName","SheetNames","workSheet","Sheets","utils","sheet_to_json","onerror","err","then","d","fetch","headers","response","json","catch","console","log","filter","obj","Number","handleSetMinPrice","value","handleSetMaxPrice","files"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\nimport Filters from './components/Filters';\n\nfunction App() {\n  const [originalData, setOriginalData] = useState([]);\n  const [greaterThan, setGreaterThan] = useState(0);\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(true);\n  const [fail, setFail] = useState(false);\n  const [minPrice, setMinPrice] = useState(0); \n  const [maxPrice, setMaxPrice] = useState(''); \n\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */ \n  const readFile = (file) => {\n    const promise = new Promise((res, rej)=>{\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */ \n        const workbook = XLSX.read(arrayBuffer, {type:'buffer'});\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      }\n \n      fileReader.onerror = (err) => rej(err);\n    })\n\n    promise.then((d)=>{\n      setData(d[0]);\n      setLoaded(true);\n    })\n  }\n\n  /* fetching data and update data state on mount */ \n  useEffect(()=>{\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers:{\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then(response=>{\n      return response.json();\n    })\n    .then(data=>{\n      setOriginalData(data[0]);\n      setData(data[0]);\n      return setLoaded(false);\n    })\n    .catch(err=>{\n      setLoaded(true);\n      setFail(true);\n      return console.log(err);\n    })\n  },[])\n\n  /* table data changes every time minPrice changes */\n  useEffect(()=>{\n    setData(originalData);\n    setGreaterThan(\n      (data.filter((obj)=>{\n        return Number(obj['Price']) > Number(minPrice);\n      }))()\n    );\n    return setData(greaterThan);\n\n  }, [minPrice])\n\n  const handleSetMinPrice = (e) => {\n    setMinPrice(e.target.value);\n  }\n  const handleSetMaxPrice = (e) => {\n    return setMaxPrice(e.target.value);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n\n      <input type=\"file\" \n      name=\"XlFileLoader\"\n      id=\"XlFileLoader\"\n      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \n      onChange={(e)=>{\n        setLoaded(false);\n        const file = e.target.files[0];\n        readFile(file);\n      }}/>\n\n      <Filters \n      minPrice={minPrice} \n      maxPrice={maxPrice}\n      setMinPriceHandler={handleSetMinPrice}\n      setMaxPriceHandler={handleSetMaxPrice}\n      />\n\n      { \n      !fail ? \n        ( !loaded ? <DataTable data={data}/> : <h1>Still loading data...</h1>) : \n        (<h1>Failed to fetch data...</h1>) \n      }\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}