{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\nimport Filters from './components/Filters';\n\nfunction reducer(state, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case 'SET_DATAREADY':\n      return { ...state,\n        dataReady: payload\n      };\n\n    case 'UPDATE_DATA':\n      return { ...state,\n        data: payload\n      };\n\n    case 'SET_LOADING':\n      return { ...state,\n        loaded: payload\n      };\n\n    case 'SET_FAIL':\n      return { ...state,\n        fail: payload\n      };\n\n    case 'SET_MINPRICE':\n      return { ...state,\n        minPrice: payload\n      };\n\n    case 'SET_MAXPRICE':\n      return { ...state,\n        maxPrice: payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  _s();\n\n  // const [dataReady, setDataReady] = useState(false);\n  const initialState = {\n    dataReady: false,\n    data: [],\n    loaded: false,\n    fail: false,\n    minPrice: 0,\n    maxPrice: ''\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    dataReady,\n    data,\n    loaded,\n    fail,\n    minPrice,\n    maxPrice\n  } = state;\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */\n\n  const readFile = file => {\n    const promise = new Promise((res, rej) => {\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = e => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */\n\n        const workbook = XLSX.read(arrayBuffer, {\n          type: 'buffer'\n        });\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      };\n\n      fileReader.onerror = err => rej(err);\n    });\n    promise.then(d => {\n      // setData(d[0]);\n      // return setLoaded(true);\n      dispatch({\n        type: 'UPDATE_DATA',\n        payload: d[0]\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      return;\n    });\n  };\n  /* fetching data and update data state on mount */\n\n\n  useEffect(() => {\n    !dataReady &&\n    /* fetch data from ./public/data.json */\n    fetch('data.json', {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      // setData(data[0]);\n      // return setLoaded(false);\n      dispatch({\n        type: 'UPDATE_DATA',\n        payload: data[0]\n      });\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return;\n    }).then(() => {\n      dispatch({\n        type: 'SET_DATAREADY',\n        payload: true\n      });\n      return;\n    }).catch(err => {\n      // setLoaded(true);\n      // setFail(true);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'SET_FAIL',\n        payload: true\n      });\n      throw err;\n    });\n  }, [dataReady]);\n\n  const handleSetMinPrice = e => {\n    // return setMinPrice(e.target.value);\n    dispatch({\n      type: 'SET_MINPRICE',\n      payload: e.target.value\n    });\n  };\n\n  const handleSetMaxPrice = e => {\n    // return setMaxPrice(e.target.value);\n    dispatch({\n      type: 'SET_MAXPRICE',\n      payload: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"XlFileLoader\",\n      id: \"XlFileLoader\",\n      accept: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      onChange: e => {\n        // setLoaded(false);\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n        const file = e.target.files[0];\n        readFile(file);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      minPrice: minPrice,\n      maxPrice: maxPrice,\n      setMinPriceHandler: handleSetMinPrice,\n      setMaxPriceHandler: handleSetMaxPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), dataReady && !fail ? !loaded ? /*#__PURE__*/_jsxDEV(DataTable, {\n      data: data,\n      minPrice: minPrice,\n      maxPrice: maxPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Still loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 80\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Failed to fetch data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/eddie.cm.lam/Desktop/eddie_proj/REdataProj/datafilterview/src/App.jsx"],"names":["React","useEffect","useReducer","useState","XLSX","DataTable","Filters","reducer","state","action","type","payload","dataReady","data","loaded","fail","minPrice","maxPrice","App","initialState","dispatch","readFile","file","promise","Promise","res","rej","fileReader","FileReader","readAsArrayBuffer","onload","e","arrayBuffer","target","result","workbook","read","worksheetName","SheetNames","workSheet","Sheets","utils","sheet_to_json","onerror","err","then","d","fetch","headers","response","json","catch","handleSetMinPrice","value","handleSetMaxPrice","files"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB;;AAEA,UAAOC,IAAP;AACE,SAAK,eAAL;AACE,aAAO,EAAC,GAAGF,KAAJ;AAAWI,QAAAA,SAAS,EAAED;AAAtB,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAC,GAAGH,KAAJ;AAAWK,QAAAA,IAAI,EAAEF;AAAjB,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAC,GAAGH,KAAJ;AAAWM,QAAAA,MAAM,EAAEH;AAAnB,OAAP;;AACF,SAAK,UAAL;AACE,aAAO,EAAC,GAAGH,KAAJ;AAAWO,QAAAA,IAAI,EAAEJ;AAAjB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAC,GAAGH,KAAJ;AAAWQ,QAAAA,QAAQ,EAAEL;AAArB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAC,GAAGH,KAAJ;AAAWS,QAAAA,QAAQ,EAAEN;AAArB,OAAP;;AACF;AACE,aAAOH,KAAP;AAdJ;AAgBD;;AAED,SAASU,GAAT,GAAe;AAAA;;AAEb;AAEA,QAAMC,YAAY,GAAG;AACnBP,IAAAA,SAAS,EAAE,KADQ;AAEnBC,IAAAA,IAAI,EAAE,EAFa;AAGnBC,IAAAA,MAAM,EAAE,KAHW;AAInBC,IAAAA,IAAI,EAAE,KAJa;AAKnBC,IAAAA,QAAQ,EAAE,CALS;AAMnBC,IAAAA,QAAQ,EAAE;AANS,GAArB;AAQA,QAAM,CAACT,KAAD,EAAQY,QAAR,IAAoBlB,UAAU,CAACK,OAAD,EAAUY,YAAV,CAApC;AACA,QAAM;AAACP,IAAAA,SAAD;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,MAAlB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA,QAAhC;AAA0CC,IAAAA;AAA1C,MAAsDT,KAA5D;AAEA;AACF;AACA;AACA;;AACE,QAAMa,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAY;AACtC;AACA,YAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACAD,MAAAA,UAAU,CAACE,iBAAX,CAA6BP,IAA7B;;AAEAK,MAAAA,UAAU,CAACG,MAAX,GAAqBC,CAAD,IAAO;AACzB,cAAMC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,MAA7B;AACA;;AACA,cAAMC,QAAQ,GAAG/B,IAAI,CAACgC,IAAL,CAAUJ,WAAV,EAAuB;AAACtB,UAAAA,IAAI,EAAC;AAAN,SAAvB,CAAjB;AACA,cAAM2B,aAAa,GAAGF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAAtB;AACA,cAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAT,CAAgBH,aAAhB,CAAlB;AACA,cAAMxB,IAAI,GAAGT,IAAI,CAACqC,KAAL,CAAWC,aAAX,CAAyBH,SAAzB,CAAb;AACAd,QAAAA,GAAG,CAACZ,IAAD,CAAH;AACD,OARD;;AAUAc,MAAAA,UAAU,CAACgB,OAAX,GAAsBC,GAAD,IAASlB,GAAG,CAACkB,GAAD,CAAjC;AACD,KAhBe,CAAhB;AAkBArB,IAAAA,OAAO,CAACsB,IAAR,CAAcC,CAAD,IAAK;AAChB;AACA;AACA1B,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAAEmC,CAAC,CAAC,CAAD;AAA/B,OAAD,CAAR;AACA1B,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAD,CAAR;AACA;AACD,KAND;AAOD,GA1BD;AA4BA;;;AACAV,EAAAA,SAAS,CAAC,MAAI;AACZ,KAACW,SAAD;AACE;AACAmC,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjBC,MAAAA,OAAO,EAAC;AACN,wBAAgB;AADV;AADS,KAAd,CAAL,CAKCH,IALD,CAKMI,QAAQ,IAAE;AACd,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAPD,EAQCL,IARD,CAQMhC,IAAI,IAAE;AACV;AACA;AACAO,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAAEE,IAAI,CAAC,CAAD;AAAlC,OAAD,CAAR;AACAO,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAD,CAAR;AACA;AACD,KAdD,EAeCkC,IAfD,CAeM,MAAI;AACRzB,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,eAAN;AAAuBC,QAAAA,OAAO,EAAC;AAA/B,OAAD,CAAR;AACA;AACD,KAlBD,EAmBCwC,KAnBD,CAmBOP,GAAG,IAAE;AACV;AACA;AACAxB,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAD,CAAR;AACAS,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAC,UAAN;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAD,CAAR;AACA,YAAMiC,GAAN;AACD,KAzBD,CAFF;AA+BD,GAhCQ,EAgCN,CAAChC,SAAD,CAhCM,CAAT;;AAmCA,QAAMwC,iBAAiB,GAAIrB,CAAD,IAAO;AAC/B;AACAX,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAC,cAAN;AAAsBC,MAAAA,OAAO,EAAEoB,CAAC,CAACE,MAAF,CAASoB;AAAxC,KAAD,CAAR;AACD,GAHD;;AAIA,QAAMC,iBAAiB,GAAIvB,CAAD,IAAO;AAC/B;AACAX,IAAAA,QAAQ,CAAC;AAACV,MAAAA,IAAI,EAAC,cAAN;AAAsBC,MAAAA,OAAO,EAAEoB,CAAC,CAACE,MAAF,CAASoB;AAAxC,KAAD,CAAR;AACD,GAHD;;AAKA,sBAEI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACA,MAAA,IAAI,EAAC,cADL;AAEA,MAAA,EAAE,EAAC,cAFH;AAGA,MAAA,MAAM,EAAC,mEAHP;AAIA,MAAA,QAAQ,EAAGtB,CAAD,IAAK;AACb;AACAX,QAAAA,QAAQ,CAAC;AAACV,UAAAA,IAAI,EAAC,aAAN;AAAqBC,UAAAA,OAAO,EAAE;AAA9B,SAAD,CAAR;AACA,cAAMW,IAAI,GAAGS,CAAC,CAACE,MAAF,CAASsB,KAAT,CAAe,CAAf,CAAb;AACAlC,QAAAA,QAAQ,CAACC,IAAD,CAAR;AACD;AATD;AAAA;AAAA;AAAA;AAAA,YAFF,eAaE,QAAC,OAAD;AACA,MAAA,QAAQ,EAAEN,QADV;AAEA,MAAA,QAAQ,EAAEC,QAFV;AAGA,MAAA,kBAAkB,EAAEmC,iBAHpB;AAIA,MAAA,kBAAkB,EAAEE;AAJpB;AAAA;AAAA;AAAA;AAAA,YAbF,EAqBE1C,SAAS,IACP,CAACG,IADH,GAEM,CAACD,MAAD,gBACF,QAAC,SAAD;AAAW,MAAA,IAAI,EAAED,IAAjB;AAAuB,MAAA,QAAQ,EAAEG,QAAjC;AAA2C,MAAA,QAAQ,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADE,gBACiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHvE,gBAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBP;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgCD;;GA5HQC,G;;KAAAA,G;AA8HT,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useReducer, useState} from 'react';\nimport XLSX from 'xlsx';\nimport DataTable from './components/DataTable';\nimport Filters from './components/Filters';\n\nfunction reducer(state, action) {\n  const {type, payload} = action;\n\n  switch(type) {\n    case 'SET_DATAREADY':\n      return {...state, dataReady: payload};\n    case 'UPDATE_DATA':\n      return {...state, data: payload};\n    case 'SET_LOADING':\n      return {...state, loaded: payload};\n    case 'SET_FAIL':\n      return {...state, fail: payload};\n    case 'SET_MINPRICE':\n      return {...state, minPrice: payload};\n    case 'SET_MAXPRICE':\n      return {...state, maxPrice: payload};\n    default:\n      return state;\n  }\n}\n\nfunction App() { \n\n  // const [dataReady, setDataReady] = useState(false);\n\n  const initialState = {\n    dataReady: false,\n    data: [],\n    loaded: false,\n    fail: false,\n    minPrice: 0,\n    maxPrice: ''\n  }\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {dataReady, data, loaded, fail, minPrice, maxPrice} = state;\n\n  /**\n   * triggered when user uploads a file;\n   * mainly for updating file if need be\n   */ \n  const readFile = (file) => {\n    const promise = new Promise((res, rej)=>{\n      /* read file */\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n        /* now can read workbook */ \n        const workbook = XLSX.read(arrayBuffer, {type:'buffer'});\n        const worksheetName = workbook.SheetNames[0];\n        const workSheet = workbook.Sheets[worksheetName];\n        const data = XLSX.utils.sheet_to_json(workSheet);\n        res(data);\n      }\n \n      fileReader.onerror = (err) => rej(err);\n    })\n\n    promise.then((d)=>{\n      // setData(d[0]);\n      // return setLoaded(true);\n      dispatch({type:'UPDATE_DATA', payload: d[0]});\n      dispatch({type:'SET_LOADING', payload: true});\n      return\n    })\n  }\n\n  /* fetching data and update data state on mount */ \n  useEffect(()=>{\n    !dataReady &&\n      /* fetch data from ./public/data.json */\n      fetch('data.json', {\n        headers:{\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(response=>{\n        return response.json();\n      })\n      .then(data=>{\n        // setData(data[0]);\n        // return setLoaded(false);\n        dispatch({type:'UPDATE_DATA', payload: data[0]});\n        dispatch({type:'SET_LOADING', payload: false});\n        return \n      })\n      .then(()=>{\n        dispatch({type:'SET_DATAREADY', payload:true});\n        return\n      })\n      .catch(err=>{\n        // setLoaded(true);\n        // setFail(true);\n        dispatch({type:'SET_LOADING', payload: true});\n        dispatch({type:'SET_FAIL', payload: true});\n        throw err;\n      })\n    \n      \n\n  }, [dataReady])\n\n\n  const handleSetMinPrice = (e) => {\n    // return setMinPrice(e.target.value);\n    dispatch({type:'SET_MINPRICE', payload: e.target.value});\n  }\n  const handleSetMaxPrice = (e) => {\n    // return setMaxPrice(e.target.value);\n    dispatch({type:'SET_MAXPRICE', payload: e.target.value});\n  }\n\n  return (\n\n      <div className=\"App\">\n\n        <input type=\"file\" \n        name=\"XlFileLoader\"\n        id=\"XlFileLoader\"\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \n        onChange={(e)=>{\n          // setLoaded(false);\n          dispatch({type:'SET_LOADING', payload: false});\n          const file = e.target.files[0];\n          readFile(file);\n        }}/>\n\n        <Filters \n        minPrice={minPrice} \n        maxPrice={maxPrice}\n        setMinPriceHandler={handleSetMinPrice}\n        setMaxPriceHandler={handleSetMaxPrice}\n        />\n\n        { \n        dataReady &&\n          !fail ? \n            ( !loaded ? \n            <DataTable data={data} minPrice={minPrice} maxPrice={maxPrice}/> : <h1>Still loading data...</h1>) : \n            (<h1>Failed to fetch data...</h1>) \n          }\n\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}